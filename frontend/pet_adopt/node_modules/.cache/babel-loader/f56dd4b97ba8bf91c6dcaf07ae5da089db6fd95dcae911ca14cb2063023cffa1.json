{"ast":null,"code":"/* import { Link } from 'react-router-dom';\r\n//import data from '../data';\r\nimport axios from 'axios';\r\nimport { useEffect, useReducer, useState } from 'react';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Pet from '../components/Pet';\r\nimport { Helmet } from 'react-helmet-async';\r\n\r\nconst reducer = (state, action) => {\r\n  switch (action.type) {\r\n    case 'FETCH_REQUEST':\r\n      return { ...state, loading: true };\r\n    case 'FETCH_SUCCESS':\r\n      return { ...state, pets: action.payload, loading: false };\r\n    case 'FETCH_FAIL':\r\n      return { ...state, loading: false, error: action.payload };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nfunction HomeScreen() {\r\n  const [{ loading, error, pets }, dispatch] = useReducer(reducer, {\r\n    pets: [],\r\n    loading: true,\r\n    error: '',\r\n  });\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      dispatch({ type: 'FETCH_REQUEST' });\r\n      try {\r\n        const result = await axios.get('/api/pets');\r\n        dispatch({ type: 'FETCH_SUCCESS', payload: result.data });\r\n      } catch (err) {\r\n        dispatch({ type: 'FETCH_FAIL', payload: err.message });\r\n      }\r\n    };\r\n    fetchData();\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <Helmet>\r\n        <title>Pet Adopt</title>\r\n      </Helmet>\r\n      <h1 className=\"be-vietnam-pro-semibold\">Animale disponibile</h1>\r\n      <div className=\"pets\">\r\n        {loading ? (\r\n          <div>Loading...</div>\r\n        ) : error ? (\r\n          <div>{error}</div>\r\n        ) : (\r\n          <Row>\r\n            {pets.map((pet) => (\r\n              <Col key={pet.slug} sm={6} md={6} lg={3} className=\"mb-3\">\r\n                <Pet pet={pet}></Pet>\r\n              </Col>\r\n            ))}\r\n          </Row>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\nexport default HomeScreen; */","map":{"version":3,"names":[],"sources":["C:/Users/Dana Campan/Desktop/Pet-Adopt/frontend/pet_adopt/src/screens/HomeScreen.js"],"sourcesContent":["/* import { Link } from 'react-router-dom';\r\n//import data from '../data';\r\nimport axios from 'axios';\r\nimport { useEffect, useReducer, useState } from 'react';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Pet from '../components/Pet';\r\nimport { Helmet } from 'react-helmet-async';\r\n\r\nconst reducer = (state, action) => {\r\n  switch (action.type) {\r\n    case 'FETCH_REQUEST':\r\n      return { ...state, loading: true };\r\n    case 'FETCH_SUCCESS':\r\n      return { ...state, pets: action.payload, loading: false };\r\n    case 'FETCH_FAIL':\r\n      return { ...state, loading: false, error: action.payload };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nfunction HomeScreen() {\r\n  const [{ loading, error, pets }, dispatch] = useReducer(reducer, {\r\n    pets: [],\r\n    loading: true,\r\n    error: '',\r\n  });\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      dispatch({ type: 'FETCH_REQUEST' });\r\n      try {\r\n        const result = await axios.get('/api/pets');\r\n        dispatch({ type: 'FETCH_SUCCESS', payload: result.data });\r\n      } catch (err) {\r\n        dispatch({ type: 'FETCH_FAIL', payload: err.message });\r\n      }\r\n    };\r\n    fetchData();\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <Helmet>\r\n        <title>Pet Adopt</title>\r\n      </Helmet>\r\n      <h1 className=\"be-vietnam-pro-semibold\">Animale disponibile</h1>\r\n      <div className=\"pets\">\r\n        {loading ? (\r\n          <div>Loading...</div>\r\n        ) : error ? (\r\n          <div>{error}</div>\r\n        ) : (\r\n          <Row>\r\n            {pets.map((pet) => (\r\n              <Col key={pet.slug} sm={6} md={6} lg={3} className=\"mb-3\">\r\n                <Pet pet={pet}></Pet>\r\n              </Col>\r\n            ))}\r\n          </Row>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\nexport default HomeScreen; */\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}