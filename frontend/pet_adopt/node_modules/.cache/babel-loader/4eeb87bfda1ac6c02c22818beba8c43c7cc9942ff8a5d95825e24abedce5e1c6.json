{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Dana Campan\\\\Desktop\\\\Pet-Adopt\\\\frontend\\\\pet_adopt\\\\src\\\\screens\\\\MapScreen.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { GoogleMap, Marker, InfoWindow, useJsApiLoader } from '@react-google-maps/api';\nimport { useNavigate } from 'react-router-dom';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst containerStyle = {\n  display: 'flex',\n  width: '600px',\n  height: '500px'\n};\nconst center = {\n  lat: 45.66667,\n  lng: 21.5\n};\nconst addresses = [{\n  address: 'Comuna Şag, DN 59, Km 12+200',\n  info: 'Adăpost animale 1'\n}, {\n  address: 'Comuna Sacoşu Turcesc, sat Otveşti, strada Principală nr. 217',\n  info: 'Adăpost animale 2'\n}, {\n  address: 'Sat Tapia, nr. 10',\n  info: 'Adăpost animale 3'\n}];\nfunction MyComponent() {\n  _s();\n  const {\n    isLoaded\n  } = useJsApiLoader({\n    id: 'google-map-script',\n    googleMapsApiKey: 'AIzaSyBqSxES0gUd7JoNggJUjnRh5bDS2JXjUZ4'\n  });\n  const navigate = useNavigate();\n  const [map, setMap] = useState(null);\n  const [markers, setMarkers] = useState([]);\n  const [selectedMarker, setSelectedMarker] = useState(null);\n  const [shelters, setShelters] = useState([]);\n  useEffect(() => {\n    const fetchShelters = async () => {\n      try {\n        const response = await axios.get('/api/shelters');\n        setShelters(response.data);\n      } catch (error) {\n        console.error('Error fetching shelters:', error);\n      }\n    };\n    fetchShelters();\n  }, []);\n  useEffect(() => {\n    if (isLoaded) {\n      const geocoder = new window.google.maps.Geocoder();\n      const newMarkers = [];\n      addresses.forEach((place, index) => {\n        geocoder.geocode({\n          address: place.address\n        }, (results, status) => {\n          if (status === 'OK') {\n            const location = results[0].geometry.location;\n            newMarkers.push({\n              position: {\n                lat: location.lat(),\n                lng: location.lng()\n              },\n              title: place.info,\n              id: index\n            });\n            setMarkers([...newMarkers]);\n          } else {\n            console.error(`Geocode was not successful for the following reason: ${status}`);\n          }\n        });\n      });\n    }\n  }, [isLoaded]);\n  const onLoad = React.useCallback(function callback(map) {\n    const bounds = new window.google.maps.LatLngBounds(center);\n    map.fitBounds(bounds);\n    setMap(map);\n  }, []);\n  const onUnmount = React.useCallback(function callback(map) {\n    setMap(null);\n  }, []);\n  const handleMarkerClick = shelterName => {\n    //setSelectedMarker(marker);\n    navigate(`/shelter/${encodeURIComponent(shelterName)}`);\n  };\n  const handleInfoWindowClose = () => {\n    setSelectedMarker(null);\n  };\n  return isLoaded ? /*#__PURE__*/_jsxDEV(GoogleMap, {\n    mapContainerStyle: containerStyle,\n    center: center,\n    zoom: 10,\n    onLoad: onLoad,\n    onUnmount: onUnmount,\n    children: markers.map(shelters.map(shelter => /*#__PURE__*/_jsxDEV(Marker, {\n      position: [shelter.latitude, shelter.longitude],\n      onClick: () => handleMarkerClick(shelter.name) // Trimitem numele adăpostului ca argument în funcția handleMarkerClick\n    }, shelter.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 11\n    }, this)))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 5\n  }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n}\n_s(MyComponent, \"SC13Y+s/42hpDDvk5rZPePPZdoM=\", false, function () {\n  return [useJsApiLoader, useNavigate];\n});\n_c = MyComponent;\nexport default _c2 = /*#__PURE__*/React.memo(MyComponent);\nvar _c, _c2;\n$RefreshReg$(_c, \"MyComponent\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"names":["React","useState","useEffect","GoogleMap","Marker","InfoWindow","useJsApiLoader","useNavigate","axios","jsxDEV","_jsxDEV","Fragment","_Fragment","containerStyle","display","width","height","center","lat","lng","addresses","address","info","MyComponent","_s","isLoaded","id","googleMapsApiKey","navigate","map","setMap","markers","setMarkers","selectedMarker","setSelectedMarker","shelters","setShelters","fetchShelters","response","get","data","error","console","geocoder","window","google","maps","Geocoder","newMarkers","forEach","place","index","geocode","results","status","location","geometry","push","position","title","onLoad","useCallback","callback","bounds","LatLngBounds","fitBounds","onUnmount","handleMarkerClick","shelterName","encodeURIComponent","handleInfoWindowClose","mapContainerStyle","zoom","children","shelter","latitude","longitude","onClick","name","fileName","_jsxFileName","lineNumber","columnNumber","_c","_c2","memo","$RefreshReg$"],"sources":["C:/Users/Dana Campan/Desktop/Pet-Adopt/frontend/pet_adopt/src/screens/MapScreen.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport {\r\n  GoogleMap,\r\n  Marker,\r\n  InfoWindow,\r\n  useJsApiLoader,\r\n} from '@react-google-maps/api';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport axios from 'axios';\r\n\r\nconst containerStyle = {\r\n  display: 'flex',\r\n  width: '600px',\r\n  height: '500px',\r\n};\r\n\r\nconst center = {\r\n  lat: 45.66667,\r\n  lng: 21.5,\r\n};\r\n\r\nconst addresses = [\r\n  { address: 'Comuna Şag, DN 59, Km 12+200', info: 'Adăpost animale 1' },\r\n  {\r\n    address: 'Comuna Sacoşu Turcesc, sat Otveşti, strada Principală nr. 217',\r\n    info: 'Adăpost animale 2',\r\n  },\r\n  { address: 'Sat Tapia, nr. 10', info: 'Adăpost animale 3' },\r\n];\r\n\r\nfunction MyComponent() {\r\n  const { isLoaded } = useJsApiLoader({\r\n    id: 'google-map-script',\r\n    googleMapsApiKey: 'AIzaSyBqSxES0gUd7JoNggJUjnRh5bDS2JXjUZ4',\r\n  });\r\n\r\n  const navigate = useNavigate();\r\n  const [map, setMap] = useState(null);\r\n  const [markers, setMarkers] = useState([]);\r\n  const [selectedMarker, setSelectedMarker] = useState(null);\r\n\r\n  const [shelters, setShelters] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchShelters = async () => {\r\n      try {\r\n        const response = await axios.get('/api/shelters');\r\n        setShelters(response.data);\r\n      } catch (error) {\r\n        console.error('Error fetching shelters:', error);\r\n      }\r\n    };\r\n\r\n    fetchShelters();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (isLoaded) {\r\n      const geocoder = new window.google.maps.Geocoder();\r\n      const newMarkers = [];\r\n\r\n      addresses.forEach((place, index) => {\r\n        geocoder.geocode({ address: place.address }, (results, status) => {\r\n          if (status === 'OK') {\r\n            const location = results[0].geometry.location;\r\n            newMarkers.push({\r\n              position: { lat: location.lat(), lng: location.lng() },\r\n              title: place.info,\r\n              id: index,\r\n            });\r\n            setMarkers([...newMarkers]);\r\n          } else {\r\n            console.error(\r\n              `Geocode was not successful for the following reason: ${status}`\r\n            );\r\n          }\r\n        });\r\n      });\r\n    }\r\n  }, [isLoaded]);\r\n\r\n  const onLoad = React.useCallback(function callback(map) {\r\n    const bounds = new window.google.maps.LatLngBounds(center);\r\n    map.fitBounds(bounds);\r\n\r\n    setMap(map);\r\n  }, []);\r\n\r\n  const onUnmount = React.useCallback(function callback(map) {\r\n    setMap(null);\r\n  }, []);\r\n\r\n  const handleMarkerClick = (shelterName) => {\r\n    //setSelectedMarker(marker);\r\n    navigate(`/shelter/${encodeURIComponent(shelterName)}`);\r\n  };\r\n\r\n  const handleInfoWindowClose = () => {\r\n    setSelectedMarker(null);\r\n  };\r\n\r\n  return isLoaded ? (\r\n    <GoogleMap\r\n      mapContainerStyle={containerStyle}\r\n      center={center}\r\n      zoom={10}\r\n      onLoad={onLoad}\r\n      onUnmount={onUnmount}\r\n    >\r\n      {markers.map(\r\n        shelters.map((shelter) => (\r\n          <Marker\r\n            key={shelter.id}\r\n            position={[shelter.latitude, shelter.longitude]}\r\n            onClick={() => handleMarkerClick(shelter.name)} // Trimitem numele adăpostului ca argument în funcția handleMarkerClick\r\n          >\r\n            {/* Restul codului pentru marker */}\r\n          </Marker>\r\n        ))\r\n      )}\r\n    </GoogleMap>\r\n  ) : (\r\n    <></>\r\n  );\r\n}\r\n\r\nexport default React.memo(MyComponent);\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}